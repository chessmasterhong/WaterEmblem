/** * enemy_spawner.js * ----- * An entity that generates (creates but does not spawn) and spawns enemy * entities in a specified region on the map . */ig.module(    'game.entities.misc.enemy_spawner').requires(    'impact.entity',    'game.entities.enemies.practice_dummy').defines(function() { "use strict";    ig.global.EntityEnemy_spawner = ig.Entity.extend({        name: 'enemy_spawner',        //type: ig.Entity.TYPE.B,        checkAgainst: ig.Entity.TYPE.A,        collides: ig.Entity.COLLIDES.NEVER,        // This entity doesn't have graphics, so we create a box that        // is displayed within Weltmeister to represent this entity.        // Tell Weltmeister how to render the object inside edit view.        // The following draws a green 8x8 resizable box.        _wmBoxColor: 'rgba(0, 255, 0, 0.3)',        _wmDrawBox: true,        _wmScalable: true,        size: {x: 8, y: 8},        // Store enumeration of all possible enemies grouped by encounter zones        enemy_groups_all: [            ['EntityPractice_dummy', 'EntityPractice_dummy', 'EntityPractice_dummy', 'EntityPractice_dummy'],            //['Enemy10', 'Enemy11'],            //['Enemy20', 'Enemy21', 'Enemy22', 'Enemy23', 'Enemy24', 'Enemy25']        ],        init: function(x, y, settings) {            this.parent(x, y, settings);        },        // Override update method and remove this.parent() so as not to        // waste render cycles drawing an entity with no graphics.        update: function() {}, // End update method        /**         * array generateEnemies(int num_of_enemies)         *     Generates enemies in a defined area based on encounter zone.         *         * Precondition:         *     num_of_enemies: The number of enemies to generate. Must be an         *         integer greater than 0.         *         *     pos.y: The minimum y-coordinate of the bounding box to generate         *         enemy's position. Generally, this is set by default when         *         placing this entity in Weltmeister.         *     pos.y: The minimum x-coordinate of the bounding box to generate         *         enemy's position. Generally, this is set by default when         *         placing this entity in Weltmeister.         *     size.x: The width of the bounding box to generate enemy's         *         position. Generally, this is set by default when scaling the         *         width of this entity in Weltmeister.         *     size.y: The height of the bounding box to generate enemy's         *         position. Generally, this is set by default when scaling the         *         width of this entity in Weltmeister.         *         * Postcondition:         *     If all preconditions are satisfied, returns an array of         *     num_of_enemies objects. Each object contains an random generated         *     enemy's entity name based on the encounter zone and their         *     position. Enemy's data can be obtained by getting the object's         *     property from the array element. Use spawnEnemies() function         *     provided in this entity to spawn the generated enemies. If any of         *     the preconditions fails, returns an empty array.         *         * Example: Generate 2 random enemies from encounter zone 4 and         *     randomly position them between 0 <= x <= 100 and 50 <= y <= 150.         *         *     // main.js         *     ig.global.encounter_zone = 4;         *     var enemy_spawner = this.getEntitiesByType(EntityEnemy_spawner)[0];         *     enemies = enemy_spawner.generateEnemies(2);         *     console.log(enemies);         *         *     // Weltmeister         *     EntityEnemy_spawner pos.x  = 0         *     EntityEnemy_spawner pos.y  = 100         *     EntityEnemy_spawner size.x = 50         *     EntityEnemy_spawner size.y = 150         *         */        generateEnemies: function(num_of_enemies) {            // Determine the enemy group to use based on encounter zone            var enemy_groups = this.enemy_groups_all[ig.global.encounter_zone];            var enemy_groups_size = enemy_groups.length;            // Get map's tile size            var t = ig.global.tilesize * 0.5;            var range_min = {x: this.pos.x, y: this.pos.y};            var range_max = {x: this.pos.x + this.size.x, y: this.pos.y + this.size.y};            // Create enemies            var enemies = [];            if((typeof num_of_enemies === 'number' && (num_of_enemies % 1) === 0) && (num_of_enemies > 0)) {                console.log('Generating ' + num_of_enemies + ' enemies...');                for(var e = 0; e < num_of_enemies; e++) {                    // Randomize spawn position                    var p = {                        x: range_min.x + Math.floor(Math.random() * (range_max.x - range_min.x)),                        y: range_min.y + Math.floor(Math.random() * (range_max.y - range_min.y))                    };                    // Push into enemies array the required parameters to spawn an entity                    enemies[e] = {                        // Select a random enemy from the encounter zone enemies; Used to reference entity to spawn                        entity_name: enemy_groups[Math.floor(Math.random() * enemy_groups_size)],                        // Round spawn position to nearest multiple of tile size; Used to set entity's position                        pos: {x: p.x + t - (p.x + t) % ig.global.tilesize, y: p.y + t - (p.y + t) % ig.global.tilesize}                    };                }            }            return enemies;        }, // End generateEnemies method        /**         * array spawnEnemies(array enemies)         *     Spawns enemies on the map.         *         * Precondition:         *     enemies: The enemies to spawn. Must be an array of objects such         *         that each object has the following properties:         *         [0] entity_name: The entity name of the enemy. Must be in the         *               form EntityMy_enemy_entity, where the name must always         *               be prepended by "Entity", the first character after         *               "Entity" is capitalized, all other characters         *               afterwards are lowercased, and any instances of         *               whitespace is replaced with an underscore.         *         [1] pos.x, pos.y: The respective x-coordinate and         *               y-coordinate to spawn the enemy on the map.         *         * Postcondition:         *     If all preconditions are satisfied, returns an array of objects         *     where the number of elements in the array equals the length of         *     the generated enemies array. Each object contains the generated         *     enemy's properties and methods. Enemy's data can be obtained by         *     getting the object's property or methods from the array element.         *     If any of the preconditions fails, returns an empty array.         *         * Example: Spawn the generated enemies on the map and get the first         *     enemy's health.         *         *     // main.js         *     ig.global.encounter_zone = 4;         *     var enemy_spawner = this.getEntitiesByType(EntityEnemy_spawner)[0];         *     enemies = enemy_spawner.generateEnemies(2);         *     enemy = enemy_spawner.spawnEnemies(enemies);         *     console.log(enemy[0].health);         */        spawnEnemies: function(enemies) {            // Spawn enemy units on battlefield            var enemy = [];            for(var e = 0; e < enemies.length; e++) {                var spawned_enemy = ig.game.spawnEntity(enemies[e].entity_name, enemies[e].pos.x, enemies[e].pos.y, {name: 'enemy_' + e});                enemy[e] = ig.game.getEntityByName('enemy_' + e);                console.log(enemies[e].entity_name + ' referenced as ' + enemy[e].name + ' spawned at (' + enemy[e].pos.x + ', ' + enemy[e].pos.y + ')');            }            //console.log(enemy);            return enemy;        }    }); // End EntityEnemy_spawner}); // End .defines