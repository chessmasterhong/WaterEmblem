############################################################################
#                                                                          #
#                         Developer Tasks Roadmap                          #
#                                                                          #
############################################################################

----------------------------------------------------------------------------
|                               BATTLE SYSTEM                              |
----------------------------------------------------------------------------

* Ability to select a unit, click a square and have that unit move
  there through the A-Star Pathfinding plugin.

* Objective system. Maps can have different ways of being beaten based
  on the following objectives:

      -> By defeating the boss of the map, the chapter ends and the
         player advances to the next map.

            -> To implement, we could assign a name ("Boss") to an enemy,
               and on the kill() method we simply advance to the next
               level.

      -> Turn based defend an area/allies. Given X amount of turns, we want
         to have the player defend an area (such as a castle or a square
         on the map). Victory is achieved upon the turn counter reaching
         the designated number while the condition is still false.

            -> For instance, we can create an entity on the map which acts
               as the throne of a castle. The goal could be to defend it
               from enemy units for 10 turns. We can have a turn counter
               based on the number of times the player phase comes up. We
               then simply check for collision with the Throne entity and
               the enemy entity. On collision, the player gets a game over.


* Ability to end a player's turn prematurely by selecting a unit and
  clicking the same square. A window would then pop up saying "WAIT".

      -> Dependency: GUI system needs to be built.


------------------------------------------------------------------------------
|                                 Features                                   |
------------------------------------------------------------------------------


##############################################################################
#                       GRAPHICAL USER INTERFACE                             #
##############################################################################


* Graphical User Interface functions the following way:

   ->  By clicking on a player unit, after moving a player
       to a square, the menu pops up which is described below.

    -> By clicking on an enemy unit, we can display a menu which
       allows the player to view the enemy stats through a stat
       screen.

  * Has the following features:

    -> Main GUI window for MOVE, ATTACK, ITEM, TRADE, END

        -> ATTACK: If an enemy unit is adjacent to the player after moving,
           the player can select to attack. Ideally, we want to highlight all
           "attack-able" squares for the player.
        -> ITEM: Allows the player to open up their inventory and use an item.
        -> TRADE: Allows the player to trade with an adjacent player.
        -> WAIT: After moving, the player clicks this button to confirm. [ COMPLETE ]
        -> END: Allows the player to end the PLAYER PHASE prematurely.
            -> This is triggered by clicking any arbitrary square on the map
               to pull up the menu.
        -> STATS: Pulls up a stat screen to show the players stats.       [ COMPLETE ]


##############################################################################
#                                   MAPS                                     #
##############################################################################


* Maps need to be built, preferably with stategic locations for enemy placement.

  -> Dependency: Graphics need to be created using GIMP and spritesheets.


##############################################################################
#                                  TERRAIN                                   #
##############################################################################

[ Prototype COMPLETE ]

* Terrain needs to be factored into stat calculations. The following terrains
  are planned:

    -> FORTRESS: If a unit is standing on it, they gain +2 DEF, +20 AVOID, and
      recover 10 HP every turn.
    -> FOREST:  Grants +20 AVOID, +1 DEF for a unit standing on it.
    -> SAND: Grants +10 AVOID for a unit standing on it.
    -> MOUNTAIN: Grants +40 AVOID, +1 DEF for a unit standing on it.

      -> Terrain stat calculations are dependent on a stat system.

* In the future, we would like to implement movement costs for each terrain.

    -> FORTRESS: No movement penalty.
    -> FOREST: Moving through a forest tile costs 2 movement.
    -> SAND: Moving through a sand tile costs 2 movement.
    -> MOUNTAIN: Moving through a mountain tile costs 3 movement.


##############################################################################
#                                STAT SYSTEM                                 #
##############################################################################

[ Prototype COMPLETED by Kim ]

* The following stat system is proposed:

    -> ATTACK: An integer representing the base attack of the unit. Maximum for
               a base unit is 20. Total attack is computed as follows:

                    -> TOTAL ATTACK = ATTACK + Weapon attack value

    -> MAGIC: An integer representing the base magic of the unit. Maximum for a
              base unit is 20. Total magic power is computed as follows:

                    -> TOTAL MAGIC = MAGIC + Weapon magic value

    -> LUCK:  An integer representing the base luck of the unit. Maximum for all
              units is 30. Contributes slightly to speed/avoid stats.

    -> DEFENSE: An integer representing the base def of the unit. Maximum for all
                base units is 20. Damage recieved is computed as follows:

                  -> DAMAGE TAKEN = TOTAL ATTACK OF ENEMY - DEFENSE

    -> RESISTANCE: An integer representing the base res of the unit. Maximum for all
                   base units is 20. Damage recieved is computed as follows:

                  -> DAMAGE TAKEN = TOTAL MAGIC OF ENEMY - RESISTANCE

    -> SPEED:      An integer representing the base speed of the unit. Maximum for all
                   base units is 20. Speed contributes to the percentage of avoiding
                   enemy attacks.

* All we need now is to come up with a formula to compute avoid rates based on LUK and SPD.
  We'll probably use Fire Emblem's formulas for this.

##############################################################################
#                                EXPERIENCE SYSTEM                           #
##############################################################################


* The following features need to be included inside of this experience system:

    -> All player units need an experience property to be able to accumulate experience.
    -> Enemy units should also have a property which holds the amount of experience
       they give out after being killed.

* Experience system also has the following functionality:

    -> When a player unit attacks an enemy (but doesn't kill them), the player should still
      gain experience according to a formula (which we don't have right now). For now, we should
      award the player 1/4th of the experience an enemy would give on death each time they 
      attack the enemy.

    -> When a player kills an enemy unit, that player gains the experience the enemy has in its 
       experience property.

    -> When the player gains 100 EXP, they gain a level. Experience wraps around, if a player
       has 90 EXP and they gain 20 EXP, they now are at level [2] and has 10 EXP. 

* On Level Up, we also need a function that increases the players stats at "random". Here is an 
  example:

    -> Assume the player has a property called "levelUpPercentage: { STR: 40, MAG: 20, DEF: 20,
          RES: 20, SPD: 80, LUK: 70 }". This property holds the "probabilities" that a stat will
          increase by +1 on level up.

    -> Now we write a function that iterates 6 times (one for each stat), and compute a 
       RAND() function and store the numbers (the rand function has to return a number
       beween 0 and 100). The function will output a new dictionary which has values such as:
       {30, 30, 40, 50, 70, 60}.

            -> We now compare our new dictionary {30, 30, 40, 50, 70, 60} to the "levelUpPercentage"
            dictionary. If the value[i] of the new dictionary is less than levelUpPercentage[i],
            that means that stat will increase by 1. In this case, the following stat increases 
            will occur:

            levelUp: { STR: 1, MAG: 0, DEF: 0, RES: 0, SPD: 1, LUK: 1}

            -> Lastly, we add the levelUp dictionary with the dictionary stored inside of the player's
               stat property. 


         -----------------------------------------------------------
         |                        FUTURE STATS                     |
         -----------------------------------------------------------

         -> It would be nice to compute a critical hit rate. Critical
            hits do triple total damage. Critical attacks always hit,
            therefore we compute a rand() of the critical hit rate
            first, and if false, then roll a rand() value of the
            hit percentage and use that to determine hit/miss.


##############################################################################
#                        PLAYER PROGRESSION SYSTEM                           #
##############################################################################

* The ability to have players level up is needed for the stat system to flourish.
  Currently, here is how the player will progress through the level-up system:

    -> For each enemy killed, we can compute the experience gained by the unit.
       If a higher level [player] unit kills a lower level [enemy] unit, the
       amount of experience gained is lower. Essentially we want an elastic
       formula for balanced level.

    -> On level up, each stat has a rand() chance of increasing by +1. These
       percentages would be hard-coded for each player due to classes. More
       on classes on the bottom of this.

    -> The maximum level of a BASE unit is 20. After this, the player cannot level
       up any further.

        -> HOWEVER, after the player hits level 10, they can use a CLASS-CHANGE item
           to transform into an advanced unit. Their level resets to 1, and their
           stat caps will be raised. i.e: Maximum attack stat goes from 20 -> 30
           for a Warrior.

        -> To implement this, we can create items which change class by checking if
           the level and class name match the item.

        -> Advantages of changing class means more level ups, therefore higher possible
           stats and possibly new use of other weapons.



##############################################################################
#                             CLASS SYSTEM                                   #
##############################################################################

* A Class progression system is proposed as follows:

      -> FIGHTER -> Turns into WARRIOR after level 10.
          -> Can use Axes.
      -> THIEF -> Turns into ASSASSIN after level 10.
          -> Can use Swords.
      -> WYVERN KNIGHT -> Turns into WYVERN LORD after level 10.
          -> Can use lances, can fly. (Meaning unaffected by terrain)
      -> MAGE -> Turns into SAGE after level 10.
          -> Can use MAGIC.



##############################################################################
#                               WEAPON SYSTEM                                #
##############################################################################

* A simple weapon system is proposed.

      -> SWORDS beat AXES.
        -> Swords gain +20 HIT and +20 AVOID for the unit.
      -> AXES beat LANCES.
        -> Axes gain +20 HIT and +20 AVOID for the unit.
      -> LANCES beat SWORDS.
        -> Lances gain +20 HIT and +20 AVOID for the unit.


##############################################################################
ADDITIONAL IDEAS (may or may or may not be implemented)

* Fog of war
* Game settings and configuration
* Map scripts
* Dialogue (simple tutorial)
* Improved enemy AI
    - Weapon swapping before battle
    - Flee (run away from attacker)

