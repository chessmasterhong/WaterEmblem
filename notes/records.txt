################################################################################
# Records / Completed Tasks                                                    #
################################################################################


--------------------------------------------------------------------------------
Student/Faculty Mixer.
March 27, 2014
--------------------------------------------------------------------------------


Code refactoring, optimization, and cleanup. (Kevin)
[IN PROGRESS] _____


GUI polishing and enhancements. (David, Kevin)
[IN PROGRESS]  _____


Discard item from inventory. (Kevin)
[COMPLETE]  March 15, 2014


Enemy item drops. (Chris)
[COMPLETE]  March 14, 2014


Melee weapon triangle. (David)
[COMPLETE]  March 13, 2014


Item usage/durability and icon image for buttons. (Kevin)
[COMPLETE]  March 13, 2014


Fade effect in to and out of battle animation. (Kevin)
[COMPLETE]  March 13, 2014


Weapon durability. (Kevin)
[COMPLETE]  March 13, 2014


Consumable item usage. (Kevin)
[COMPLETE]  March 13, 2014


Items with special effects. (David, Kevin)
[COMPLETE]  March 12, 2014


Use items framework. (David)
[COMPLETE]  March 12, 2014


Heal friendly units. (David)
[COMPLETE]  March 12, 2014


Hooked battle animation background based on active unit terrain. (Kevin)
[COMPLETE]  March 11, 2014


Hooked battle animation attack effects on unit strike. (Kevin)
[COMPLETE]  March 11, 2014


Different font color based on gain/loss. (Kevin)
[COMPLETE]  March 11, 2014


Button and menu design. (David)
[COMPLETE]  March 10, 2014


Trade items between two friendly player units. (Kevin, David)
[COMPLETE]  March 09, 2014


Unit character sprites refactoring. (David)
[COMPLETE]  March 08, 2014


Non-collision unit assist and trade framework for friendly player units. (Kevin)
[COMPLETE]  March 08, 2014


Non-collision-based enemy detection. (Kevin)
[COMPLETE]  March 08, 2014


Code debug, refactor, optimization, and cleanup for AI, stats, and inventory. (Kevin)
[COMPLETE]  March 08, 2014


Hooked normal hit, evade, and critical hit computations to battle animation. (Kevin)
[COMPLETE]  March 08, 2014


Tint unit sprites for enemies. (Kim)
[COMPLETE]  March 07, 2014


Hook battle summary modal with stats during enemy selection. (David)
[COMPLETE]  March 07, 2014


Improved equipment system with modified stats. (David)
[COMPLETE]  March 06, 2014


Derived stats calculations. (David)
[COMPLETE]  March 05, 2014


Hooked non-collision unit attack damage to units' battle animations. (Kevin)
[COMPLETE]  March 05, 2014


Unit second attack. (Kevin)
[COMPLETE]  March 05, 2014


Unit counterattack. (Kevin)
[COMPLETE]  March 05, 2014


--------------------------------------------------------------------------------
Milestone 6: Battle animation sequence between two units.
[COMPLETE]  March 05, 2014
--------------------------------------------------------------------------------


Full battle animation sequence and transition. (Kevin)
[COMPLETE]  March 05, 2014


Hooked "fancy" unit attack animation to battle animation overlay. (Kevin)
[COMPLETE]  March 04, 2014


Hook battle animation overlay to battle system. (Kevin)
[COMPLETE]  March 04, 2014


Initial "fancy" unit attack animation for battle animation overlay. (David)
[COMPLETE]  March 04, 2014


--------------------------------------------------------------------------------
Milestone 5: Non-collision-based nearby entity detection.
[COMPLETE]  March 04, 2014
--------------------------------------------------------------------------------


Non-collision-based enemy detection. (Kevin)
[COMPLETE]  March 04, 2014


Toggle camera between "free-panning" and unit-focus states. (Kim)
[COMPLETE]  March 04, 2014
    Currently, the camera auto-focuses on the active unit. We want to add
    functionality to the camera to toggle between the active unit ("unit-focus"
    state) and the mouse cursor ("free-panning" state).

    Unit-focus state will primarity be used when the user is performing actions
    on the current selected unit. We do not want the camera to be panning around
    the map while the user wants to click on menus or another unit.

    Free-panning state will mainly be used when no unit is selected. By doing
    so, the user can easily pan around the map and select another unit that may
    not normally be visible on the game screen while in unit-focus state.


Nearby entity detection. (Kevin)
[COMPLETE]  March 03, 2014


Item system prototype via catalog. (David)
[COMPLETE]  March 03, 2014


Unit detection on mouse cusror hover. (Kevin)
[COMPLETE]  March 02, 2014


Terrain detection on mouse cursor hover. (Kevin)
[COMPLETE]  March 02, 2014


Attack and trade button in menu. (David)
[COMPLETE]  March 02, 2014


Characer modal for player units. (David)
[COMPLETE]  March 02, 2014


Character portraits for player units. (David)
[COMPLETE]  March 02, 2014


Battle scene overlay for GUI. (David)
[COMPLETE]  March 02, 2014


Weapon summary, HP bar, terrain, battle summary modals for GUI. (David)
[COMPLETE]  March 02, 2014


Real unit stats and level up growth for player units. (David)
[COMPLETE]  March 01, 2014


Mouse-based "point-and-click" unit movement. (Kevin)
[COMPLETE]  February 28, 2014
    We want to move away from the long-used keyboard-based directional arrow
    unit movement and begin using mouse-based "point-and-click" unit movement
    instead. Since the menus are already using the mouse to detect button press,
    it seems logical to also use the mouse for unit movement.

    The end goal is to use the mouse to drive most (if not all) of the unit
    actions in the game. The mouse is quicker for the user to perform actions,
    and provides more flexibility for the user to navigate around contents on
    the game screen, and is more intuitive from a developer's standpoint since
    the game engine already supports collisions. In the future, we may consider
    bringing back keyboard-based actions.


--------------------------------------------------------------------------------
Milestone 4: Character development system.
[COMPLETE]  February 28, 2014
--------------------------------------------------------------------------------


Experience and level up system. (Kim)
[COMPLETE]  February 28, 2014
    When a player unit defeats an enemy unit, we want the player unit to gain
    experience points. After the unit gains enough experience points, the unit
    will advance to the next level. Then the unit will have a chance to gain
    additional stat points that has been implemented already. The unit will
    keep gaining experience points and levels until the unit reaches the game
    level limit of level 20. At that point, the unit will stop gaining
    experience points and levels.


Chance of stat increase during unit level up. (Kim)
[COMPLETE]  February 28, 2014
    When a player unit levels up, we want the unit to have a chance to gain 1
    additional base stat point into each of their base stats.


Hook item menu to existing menu system. (Kevin)
[COMPLETE]  February 27, 2014


Unit equip and swap functionality in item menu. (David)
[COMPLETE]  February 27, 2014


Display item menu. (David)
[COMPLETE]  February 26, 2014


Hook stat system skeleton to game. (Kim)
[IN PROGRESS]  February 25, 2014
    See roadmap.txt (section: STAT SYSTEM) for details.


Unit stats screen. (David)
[COMPLETE]  February 24, 2014
    Extending from the GUI, we want to display a selected unit's stats on a new
    screen. We want to display the screen when the user presses a button and
    will remain visible until the user releases the button. In the future, we
    want the screen to remain visible until the user clicks a button to close
    (like the escape button).


Camera. (David, Kevin)
[COMPLETE]  February 24, 2014
    The current camera system (from the grid-movement plugin) is quite limited
    in functionality. We want to prevent the game from displaying "black areas"
    found when camera displays areas beyond the edge of the map and have a more
    smooth panning screen rather than the previous "screen yanking" effect. We
    can use the camera plugin from SMW-Koopa-Krisis and configure it for this
    game.

    Resources:
        https://bitbucket.org/chessmasterhong/smw-koopa-krisis/raw/1544cd73a48176b32479a476fb01ded630048f7c/lib/plugins/camera/camera.js


Terrain movement cost. (Kevin)
[COMPLETE]  February 23, 2014
    To add strategical elements to the battle system, we want to implement a
    terrain system. Each tile on the battlefield will have a terrain "attached"
    to it. Units will gain bonuses and/or penalties depending on the terrain
    that they are standing on and will offer advantages and disadvantages to
    the unit when attacking or defending against another unit. Likewise, the
    other unit will also be standing on a terrain and will have their respective
    bonuses and/or penalties applied to them during attacking or defending.

    Each terrain has their own movement cost and when the unit traverses through
    the terrain, this movement cost will be subtracted from the unit's available
    movement. If the unit does not have enough movement to traverse through the
    terrain (i.e., unit's movement < terrain movement cost), then the unit is
    unable to move to that terrain. In the future, we wish to have the unit's
    movable tile visuals to display the true tiles that the unit can move while
    taking terrain movement cost into account.


--------------------------------------------------------------------------------
Milestone 3: Interactive graphical user interface.
[COMPLETE]  February 23, 2014
--------------------------------------------------------------------------------


Actual GUI Implementation. (David)
[IN PROGRESS]  February 23, 2014
    Currently, one small part of the GUI is finished. We can now spawn a button
    after a player's movement is finished, asking the player to confirm their
    movement onto a destination tile. Using this structure, we can now begin to
    flesh out the other aspects of the GUI to control the gameplay flow.


Simple GUI menu prototype. (David)
[COMPLETE]  February 22, 2014
    Implement a prototype GUI menu system as proof of concept on how to display
    GUIs in the game. The menu should be able to register a user interaction
    with the buttons and perform the appropriate action. For now, the action
    could be just to output text to the console.


Improve unit's movement tiles and path arrows. (Kevin)
[COMPLETE]  February 22, 2014
    Currently, the unit's movement tiles and path arrows are fairly simple in
    visuals and functionalities. Improve the existing implementation for better
    visuals, additional details, and optimizing performance where necessary.

    One thing that is lacking in the current implementation is a direction arrow
    at the unit's destination tile. The arrow will point in the appropriate
    direction based on the direction of the unit's path.


--------------------------------------------------------------------------------
Game Dev begins.
February 21, 2014
--------------------------------------------------------------------------------


Initial unit battlefield sprites. (David)
[COMPLETE]  February 20, 2014
    Currently, we have simple placeholder block images for unit sprites. Add and
    hook up improved sprite images to all currently existing units (hero, ally,
    practice_dummy).


Mouse cursor interaction. (Kevin)
[COMPLETE]  February 07, 2014
    Currently, the game is using a keyboard-based movement and attack system. In
    order to break from the traditional tile based movements and for the user's
    ease of point-and-click commands, we would like to implement a method of
    moving, attacking, and possibly other actions regarding the GUI using the
    mouse cursor.

    One method of doing so is using an invisible entity that follows the mouse
    pointer. When the user clicks the mouse button, the entity will check for
    collisions with a valid entity. In turn, this will allow the valid entity to
    register the mouse click and perform its actions, if any.

    Resources:
        http://impactjs.com/forums/help/how-to-handle-clicking
        http://impactjs.com/forums/help/i-writed-whether-entity-is-clicked-function-which-need-to-be-improved/page/1


Unit available movement tiles in battle. (Kevin)
[COMPLETE]  February 07. 2014
    Implement a method of highlighting a unit's possible movement tiles which
    indicates which tiles the unit is allowed to move to during the unit's turn.
    In the future, we will need to prevent highlighting tiles that the unit
    cannot move to, such as their opposing enemy unit or collision tiles.


Stats system skeleton for character development system. (Kevin)
[COMPLETE]  February 05, 2014
    A stat system has already been implemented for the SMW-Koopa-Krisis-RPG, but
    only a small part of the system is fully functional in that game. The stat
    system can be reused for this game with deeper complexity and some balancing
    tweaks.

    Resources:
        https://bitbucket.org/chessmasterhong/smw-koopa-krisis-rpg/raw/b9b06011035118a363324462c7ef2ba96f322636/lib/game/entities/ai/basic_ai.js


--------------------------------------------------------------------------------
Milestone 2: Core battle system functionalities.
[COMPLETE]  February 03, 2014
--------------------------------------------------------------------------------


Enemy targets closest player party member in battle. (Kevin)
[COMPLETE]  February 03, 2014
    Currently, the enemy AI always targets a the first player party member to
    get generated in the battle. Improve the existing enemy AI with the ability
    to detect and target the closest player party member. A crude method of
    doing so is to do a direct (linear) distance check from the active enemy to
    all player party members. Then pick the member with the shortest distance
    and begin pathfinding towards the target. Do note that this AI may be
    exploited when a member is behind an object, such as a wall (enemy may
    detect a member as the closest unit, ignoring the wall, and may waste their
    turn trying to pathfind to the member when another member is more reachable
    and not behind an obstacle).


Player party (multiple player-controllable units) in battle. (Kevin)
[COMPLETE]  February 02, 2014
    Building upon the single player-controllable unit we have been working with,
    implement a method of allowing multiple player-controllable units (a.k.a. a
    party) on the battlefield. This is done using a similar method to creating
    the enemy units array and concatenating the party and enemy arrays together.
    Once that is done, then proceed with the battle operations already in place.


Unit movement order in battle. (Kevin)
[COMPLETE]  February 01, 2014
    Using the previously implemented enemy generator entity, implement a method
    for the game to determine in which order units on the battlefield should
    move. Some ideas would be: "All player's units move. All enemy's units
    move. Repeat until one side's units are all defeated." or "Units are sorted
    speed. Fastest unit moves first, second fastest unit moves next, and so on.
    Repeat until one side's units are all defeated."


Enemy pathfinding in battle. (Kevin)
[COMPLETE]  January 01, 2014
    Implement or find a pathfinding algorithm for enemies to move toward the
    player (and possibly friendly units in the future). The algorithm should be
    able to avoid obstacles as we may need this functionality for certain
    battlefield areas that are impassable. The movement for pathfinding enemies
    should be compatible with the existing grid movement. Consider looking at
    the Impact A* for Entities plugin and try to adapt it towards the
    aforementioned goals.

    Resources: https://github.com/hurik/impact-astar-for-entities


--------------------------------------------------------------------------------
Milestone 1: Basic navigation around the game world and basic battle system.
[COMPLETE]  December 31, 2013
--------------------------------------------------------------------------------


Code refactoring, optimization, and cleanup. (Kevin)
[COMPLETE]  December 31, 2013
    Before moving on to the next step, the codebase needs to be cleaned up by
    refactoring (repeated) code, adding function descriptions and more comments,
    and reducing unnecessary variables/properties and function calls.

    Also, try to adhere to the ECMAScript 5 (JavaScript 1.8.5) strict mode to
    try to catch previously silent errors. As of ImpactJS 1.20, "the whole
    engine has been put into strict mode, which improves performance a bit and
    also surfaced global var[iable] leakage in some places" and has recommended
    to enable strict mode for other modules as well.

    "Strict mode makes several changes to normal JavaScript semantics. First,
    strict mode eliminates some JavaScript silent errors by changing them to
    throw errors. Second, strict mode fixes mistakes that make it difficult for
    JavaScript engines to perform optimizations: strict mode code can sometimes
    be made to run faster than identical code that's not strict mode. Third,
    strict mode prohibits some syntax likely to be defined in future versions of
    ECMAScript."

    Some of the earlier browser versions does not support strict mode but this
    should not be too much of a problem since ImpactJS is targeted for
    HTML5-capable browsers (most modern browsers today) although support for
    previous browsers may be considered in the future.

    Resources:
        http://impactjs.com/blog/2012/05/impact-1-20
        http://impactjs.com/forums/help/using-use-strict/page/1
        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/Strict_mode


Random enemy generation on battlefield based on encounter zone. (Kevin)
[COMPLETE]  December 27, 2013
    Generate random enemies based on the zone area defined in the encounter zone
    entity and random positions on the battlefield to place the newly generated
    enemies. This gives additional variety to battles such that the exact
    enemies and positions cannot be predetermined beforehand. There should be a
    method to keep track of the generated enemies to determine which enemies are
    active, inactive, defeated, etc. on the battlefield.


Exit battle mode. (Kevin)
[COMPLETE]  December 26, 2013
    Allow the player to exit the battlefield (when certain conditions are met)
    and back to the player's location on the map before entering battle. For now
    the condition can be simple trigger (just to test the transition into and
    out of battle mode) but later on, the goal condition is to defeat all or
    specific enemies (or be completely defeated by the enemy) on the battlefield
    or to flee the battle.


Improve random battle encounters with encounter zones. (Kevin)
[COMPLETE]  December 27, 2013
    Create a method of designating encounter zones and use it in combination
    with the current random encounters to allow setting up specific tiles for
    encounters. This will allow the ability to create more irregular shaped
    zones for encounters (rather than the whole map), or different encounter
    zones on the same map (each with their own set of enemies or level of
    difficulty).


Random battle encounters. (Kevin)
[COMPLETE]  November 30, 2013
    When the player moves from one tile to another in the grid movement, the
    player will have a chance to enter battle. The battle state can be a new
    game state or a special map in which the player is moved to temporarily
    until the battle is over.


Map/Level transition entity. (Kevin)
[COMPLETE]  November 29, 2013
    Create a map transition entity that when the player steps/collides with it,
    the player will move to another map at a specific location of the
    destination map. Doing so would allow the movement of the player into new
    maps to give the feel of a transition of going from one room to another, or
    going from outdoor to indoor, etc. See SMW-Koopa-Krisis's pipe entity for
    level and position change.

    Resources:
        https://bitbucket.org/DrkSephy/smw-koopa-krisis/raw/3ab54322f174b160d73728b82a0aeb9e71dc269f/lib/game/entities/miscellaneous/pipe.js


Basic game display with top-down perspective and 4-directional movement. (Kevin)
[COMPLETE]  November 24, 2013
    Display game with a 4-directional "grid-like" movement (an example being one
    of the older Pokémon games for the Game Boy). The user should be given a
    top-down perspective of the game. A camera system should be added that is
    centered on and follows the player.

    Resource:
        https://github.com/lTyl/impact-grid-movement

