################################################################################
# Records / Completed Tasks                                                    #
################################################################################

Character development system: level, experience, and statistics.
[IN PROGRESS]   _____
    Now that the core battle system is completed (i.e., we can conduct a full
    combat from beginning to end), we can begin to branch off to various new
    aspects of the game. One of the features in almost all RPGs is some form of
    a character development system. A subcomponent of the system is stats. Users
    should be able to customize their character. Should their character be
    physically strong? Intelligent? Highly resilient? Quick and nimble? Or maybe
    a particular mix of stats that suits the user's gameplay style.

    Stats are broken into two major types: base stats and derived stats. Base
    stats are the most basic stats in which all other stats are derived from.
    Users can have direct input on how they wish to distribute their character's
    base stats. As a result, each of the derived stats will increase (or
    decrease) depending on how much stat points have been invested into each
    base stat. Stat points are gained only when the character gains a level.
    Levels are gained when a certain amount of experience is accumulated.
    Experience is gained from doing stuff in game, ranging from competing
    quests, attacking/defeating enemies, assisting allies, disarming traps, etc.

    A stat system has already been implemented for the SMW-Koopa-Krisis-RPG, but
    only a small part of the system is fully functional in that game. The stat
    system can be reused for this game with deeper complexity and some balancing
    tweaks.

    Resources: https://bitbucket.org/chessmasterhong/smw-koopa-krisis-rpg/raw/b9b06011035118a363324462c7ef2ba96f322636/lib/game/entities/ai/basic_ai.js


--------------------------------------------------------------------------------
Milestone 2: Core battle system functionalities complete.
[COMPLETE]  February 03, 2014
--------------------------------------------------------------------------------

Enemy targets closest player party member in battle.
[COMPLETE]  February 03, 2014
    Currently, the enemy AI always targets a the first player party member to
    get generated in the battle. Improve the existing enemy AI with the ability
    to detect and target the closest player party member. A crude method of
    doing so is to do a direct (linear) distance check from the active enemy to
    all player party members. Then pick the member with the shortest distance
    and begin pathfinding towards the target. Do note that this AI may be
    exploited when a member is behind an object, such as a wall (enemy may
    detect a member as the closest unit, ignoring the wall, and may waste their
    turn trying to pathfind to the member when another member is more reachable
    and not behind an obstacle).


Player party (multiple player-controllable units) in battle.
[COMPLETE]  February 02, 2014
    Building upon the single player-controllable unit we have been working with,
    implement a method of allowing multiple player-controllable units (a.k.a. a
    party) on the battlefield. This is done using a similar method to creating
    the enemy units array and concatenating the party and enemy arrays together.
    Once that is done, then proceed with the battle operations already in place.


Unit movement order in battle.
[COMPLETE]  February 01, 2014
    Using the previously implemented enemy generator entity, implement a method
    for the game to determine in which order units on the battlefield should
    move. Some ideas would be: "All player's units move. All enemy's units
    move. Repeat until one side's units are all defeated." or "Units are sorted
    speed. Fastest unit moves first, second fastest unit moves next, and so on.
    Repeat until one side's units are all defeated."


Enemy pathfinding in battle.
[COMPLETE]  January 01, 2014
    Implement or find a pathfinding algorithm for enemies to move toward the
    player (and possibly friendly units in the future). The algorithm should be
    able to avoid obstacles as we may need this functionality for certain
    battlefield areas that are impassable. The movement for pathfinding enemies
    should be compatible with the existing grid movement. Consider looking at
    the Impact A* for Entities plugin and try to adapt it towards the
    aforementioned goals.

    Resources: https://github.com/hurik/impact-astar-for-entities


--------------------------------------------------------------------------------
Milestone 1: Basic nagivation around the game world and basic battle system.
[COMPLETE]  December 31, 2013
--------------------------------------------------------------------------------

Code refactoring, optimization, and cleanup.
[COMPLETE]  December 31, 2013
    Before moving on to the next step, the codebase needs to be cleaned up by
    refactoring (repeated) code, adding function descriptions and more comments,
    and reducing unnecessary variables/properties and function calls.

    Also, try to adhere to the ECMAScript 5 (JavaScript 1.8.5) strict mode to
    try to catch previously silent errors. As of ImpactJS 1.20, "the whole
    engine has been put into strict mode, which improves performance a bit and
    also surfaced global var[iable] leakage in some places" and has recommended
    to enable strict mode for other modules as well.

    "Strict mode makes several changes to normal JavaScript semantics. First,
    strict mode eliminates some JavaScript silent errors by changing them to
    throw errors. Second, strict mode fixes mistakes that make it difficult for
    JavaScript engines to perform optimizations: strict mode code can sometimes
    be made to run faster than identical code that's not strict mode. Third,
    strict mode prohibits some syntax likely to be defined in future versions of
    ECMAScript."

    Some of the earlier browser versions does not support strict mode but this
    should not be too much of a problem since ImpactJS is targeted for
    HTML5-capable browsers (most modern browsers today) although support for
    previous browsers may be considered in the future.

    Resources: http://impactjs.com/blog/2012/05/impact-1-20
               http://impactjs.com/forums/help/using-use-strict/page/1
               https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/Strict_mode


Random enemy generation on battlefield based on encounter zone.
[COMPLETE]  December 27, 2013
    Generate random enemies based on the zone area defined in the encounter zone
    entity and random positions on the battlefield to place the newly generated
    enemies. This gives additional variety to battles such that the exact
    enemies and positions cannot be predetermined beforehand. There should be a
    method to keep track of the generated enemies to determine which enemies are
    active, inactive, defeated, etc. on the battlefield.


Exit battle mode.
[COMPLETE]  December 26, 2013
    Allow the player to exit the battlefield (when certain conditions are met)
    and back to the player's location on the map before entering battle. For now
    the condition can be simple trigger (just to test the transition into and
    out of battle mode) but later on, the goal condition is to defeat all or
    specific enemies (or be completely defeated by the enemy) on the battlefield
    or to flee the battle.


Improve random battle encounters with encounter zones.
[COMPLETE]  December 27, 2013
    Create a method of designating encounter zones and use it in combination
    with the current random encounters to allow setting up specific tiles for
    encounters. This will allow the ability to create more irregular shaped
    zones for encounters (rather than the whole map), or different encounter
    zones on the same map (each with their own set of enemies or level of
    difficulty).


Random battle encounters.
[COMPLETE]  November 30, 2013
    When the player moves from one tile to another in the grid movement, the
    player will have a chance to enter battle. The battle state can be a new
    game state or a special map in which the player is moved to temporarily
    until the battle is over.


Map/Level transition entity.
[COMPLETE]  November 29, 2013
    Create a map transition entity that when the player steps/collides with it,
    the player will move to another map at a specific location of the
    destination map. Doing so would allow the movement of the player into new
    maps to give the feel of a transition of going from one room to another, or
    going from outdoor to indoor, etc. See SMW-Koopa-Krisis's pipe entity for
    level and position change.

    Resources: https://bitbucket.org/DrkSephy/smw-koopa-krisis/raw/3ab54322f174b160d73728b82a0aeb9e71dc269f/lib/game/entities/miscellaneous/pipe.js


Basic game display with top-down perspective and 4-directional movement.
[COMPLETE]  November 24, 2013
    Display game with a 4-directional "grid-like" movement (an example being one
    of the older Pok√©mon games for the Game Boy). The user should be given a
    top-down perspective of the game. A camera system should be added that is
    centered on and follows the player.

    Resource: https://github.com/lTyl/impact-grid-movement

